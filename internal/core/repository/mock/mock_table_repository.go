// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/repository/tables.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/repository/tables.go -destination=internal/core/repository/mock/mock_table_repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/bossncn/restaurant-reservation-service/internal/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTableRepository is a mock of TableRepository interface.
type MockTableRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTableRepositoryMockRecorder
	isgomock struct{}
}

// MockTableRepositoryMockRecorder is the mock recorder for MockTableRepository.
type MockTableRepositoryMockRecorder struct {
	mock *MockTableRepository
}

// NewMockTableRepository creates a new mock instance.
func NewMockTableRepository(ctrl *gomock.Controller) *MockTableRepository {
	mock := &MockTableRepository{ctrl: ctrl}
	mock.recorder = &MockTableRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableRepository) EXPECT() *MockTableRepositoryMockRecorder {
	return m.recorder
}

// AvailableTables mocks base method.
func (m *MockTableRepository) AvailableTables() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableTables")
	ret0, _ := ret[0].(int)
	return ret0
}

// AvailableTables indicates an expected call of AvailableTables.
func (mr *MockTableRepositoryMockRecorder) AvailableTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableTables", reflect.TypeOf((*MockTableRepository)(nil).AvailableTables))
}

// CancelReservedTable mocks base method.
func (m *MockTableRepository) CancelReservedTable(reservationId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelReservedTable", reservationId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelReservedTable indicates an expected call of CancelReservedTable.
func (mr *MockTableRepositoryMockRecorder) CancelReservedTable(reservationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelReservedTable", reflect.TypeOf((*MockTableRepository)(nil).CancelReservedTable), reservationId)
}

// InitializeTables mocks base method.
func (m *MockTableRepository) InitializeTables(numTables int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeTables", numTables)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeTables indicates an expected call of InitializeTables.
func (mr *MockTableRepositoryMockRecorder) InitializeTables(numTables any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeTables", reflect.TypeOf((*MockTableRepository)(nil).InitializeTables), numTables)
}

// IsTableInitialized mocks base method.
func (m *MockTableRepository) IsTableInitialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTableInitialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTableInitialized indicates an expected call of IsTableInitialized.
func (mr *MockTableRepositoryMockRecorder) IsTableInitialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTableInitialized", reflect.TypeOf((*MockTableRepository)(nil).IsTableInitialized))
}

// ReserveTables mocks base method.
func (m *MockTableRepository) ReserveTables(reservation model.Reservation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveTables", reservation)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveTables indicates an expected call of ReserveTables.
func (mr *MockTableRepositoryMockRecorder) ReserveTables(reservation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveTables", reflect.TypeOf((*MockTableRepository)(nil).ReserveTables), reservation)
}
