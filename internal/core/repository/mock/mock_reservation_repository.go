// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/repository/reservations.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/repository/reservations.go -destination=internal/core/repository/mock/mock_reservation_repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/bossncn/restaurant-reservation-service/internal/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockReservationRepository is a mock of ReservationRepository interface.
type MockReservationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReservationRepositoryMockRecorder
	isgomock struct{}
}

// MockReservationRepositoryMockRecorder is the mock recorder for MockReservationRepository.
type MockReservationRepositoryMockRecorder struct {
	mock *MockReservationRepository
}

// NewMockReservationRepository creates a new mock instance.
func NewMockReservationRepository(ctrl *gomock.Controller) *MockReservationRepository {
	mock := &MockReservationRepository{ctrl: ctrl}
	mock.recorder = &MockReservationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservationRepository) EXPECT() *MockReservationRepositoryMockRecorder {
	return m.recorder
}

// CancelReservation mocks base method.
func (m *MockReservationRepository) CancelReservation(reservationID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelReservation", reservationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelReservation indicates an expected call of CancelReservation.
func (mr *MockReservationRepositoryMockRecorder) CancelReservation(reservationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelReservation", reflect.TypeOf((*MockReservationRepository)(nil).CancelReservation), reservationID)
}

// CreateReservation mocks base method.
func (m *MockReservationRepository) CreateReservation(numTables int) *model.Reservation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReservation", numTables)
	ret0, _ := ret[0].(*model.Reservation)
	return ret0
}

// CreateReservation indicates an expected call of CreateReservation.
func (mr *MockReservationRepositoryMockRecorder) CreateReservation(numTables any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservation", reflect.TypeOf((*MockReservationRepository)(nil).CreateReservation), numTables)
}

// FindReservationById mocks base method.
func (m *MockReservationRepository) FindReservationById(id string) (*model.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReservationById", id)
	ret0, _ := ret[0].(*model.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReservationById indicates an expected call of FindReservationById.
func (mr *MockReservationRepositoryMockRecorder) FindReservationById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReservationById", reflect.TypeOf((*MockReservationRepository)(nil).FindReservationById), id)
}
